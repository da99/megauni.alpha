#!/usr/bin/env node

if (process.argv.indexOf('test') > 0)
  process.env.IS_TESTING = true;

var _        = require('underscore');
var chokidar = require('chokidar');
var exec     = require("child_process").exec;
var spawn    = require("child_process").spawn;
var fs       = require("fs");
var term     = require('cli-color');
var akui     = require('akui');

var throw_err= function (err) {
  throw err;
};

var shell    = function (cmd, func) {
  return exec(cmd, function (err, o, e) {
    if ( o ) process.stdout.write(o);
    if ( e ) process.stdout.write(e);
    if (err) throw err;
    if (func)
      func(o, e);
  });
};

// ================================================================
// ================== Stream Test Results =========================
// ================================================================

var stop_stream = false;

function stream_results() {
  akui.stream_results(function (r, is_fin, stat) {
    if (stop_stream)
      return;

    if (r === 'timeout') {
      console.log('Akui: timed out.');
    } else {

      if (r.length) {
        _.each(r, function (pair) {
          var file = pair[0];
          var results = pair[1];
          var fail_color = (results.fail.length) ? "%r" : "%w";
          console.log(file, term.green("pass: " + results.pass.length), term.red("fail: " + results.fail.length));
        });
      }

      if (is_fin) {
        console.log(term.bold("Finished fetching results."));
        return;
      }
    }
  });
}

if (process.env.IS_TESTING)
  stream_results();



// ****************************************************************
// ****************** Start watching... ***************************
// ****************************************************************

var watchers = [];
var watched_dirs  = [];
var server_started = false
var ignore  = /\.(stylus|css|cssus|js)$/;

function upgrade() {
  shell("bin/upgrade skip_npm skip_os", function () {
    console.log("JS files re-downloaded.");
  });
}

function watch(dirs, func) {
  watched_dirs.push(dirs);
  var w = chokidar.watch(dirs,  {ignored: /^\./, persistent: true, interval: 190});
  watchers.push(w);
  return w;
}

watch("bin/watch")
.on('change', function (f) {
  console.log("\nFile bin/watch has changed. Exiting.");
  shutdown_all();
})
.on('error', throw_err);
;

watch( ["Client/js/_base.js"] )
.on('change', function (filename) {
  upgrade();
})
.on('error', throw_err);
;

watch( ["Server/", "Client/"] )
.on('add', function (f) {
  if (f.match(ignore))
    return;

  if (!server_started)
    return;

  console.log("\nadded: " + f);
  restart_server();
})
.on('change', function (filename) {
  if (filename.match(ignore))
    return;

  console.log("\nchanged: " + filename);
  restart_server();
})
.on('unlink', function (filename) {
  if (filename.match(ignore))
    return;

  console.log("\ndeleted: " + filename);
  restart_server();
})
.on('error', throw_err);
;


watch( "Client/applets" )
.on('add', function (f) {
  if (!server_started)
    return;
  stylus_changed(f, 'change');
})
.on('change', function (f) { stylus_changed(f, 'change'); })
.on('unlink', function (f) { stylus_changed(f, 'unlink'); })
;

// watch(['test', 'models', 'lib'])
// .on('add', function (f) {
  // if (!server_started)
    // return;
  // run_tests(f);
// })
// .on('change', run_tests)
// .on('change', run_tests)
// ;


console.log("Watching: ", _.flatten(watched_dirs).join(', '), "\n");

function run_tests(f) {
  console.log("  changed: " + f);
  exec("bin/dev/mocha", function (err, o, e) {
    if (o) process.stdout.write(o);
    if (e) process.stdout.write(e);
    if (err)
      process.stdout.write("Error message: " + err.message);
  });
}

function stylus_changed(file_name, event) {
  if (!file_name.match(/\.stylus$/))
    return;
  var css       = stylus_to_css(file_name);
  var folder    = template_family(file_name);
  var base_name = file_name.split('/').pop();

  console.log("");

  if (event === 'unlink') {
    console.log("  deleted:  " + file_name);
    console.log("  deleting: " + css);

    // For some reason the file is sometimes deleted,
    // after the folder. Using a conditional
    // prevents an warning from being printed.
    shell(' if [ -e ' + css + ' ] ; then trash-put ' + css + ' ; fi ');
  } else {
    shell("stylus " + file_name , function () {
      shell("mv " + css + 'us ' + css, function ()  {
        console.log("  moved to " + css);
      });
    });
  }

} // function

function template_family(stylus) {
  var pieces = stylus.split('/');
  pieces.shift();
  pieces.pop();
  if (pieces.length)
    return pieces.join('/');
  return null;
}

function stylus_to_css(stylus) {
  return stylus
  .replace(/\.stylus$/i, ".css")
  .replace(/\.styl$/i, ".css")
  .replace(/.stylus.css$/i, ".css")
  ;
}

function shutdown_server(func) {
  exec('bin/stop', function (err, so, se) {
    if (so) console.log(so);
    if (se) console.log(se);
    if (err && !err.message.indexOf("no process found")) {
      console.log("Exiting because: " + err);
      process.exit(1);
    }
    func();
  });
}

function restart_server(func) {

  var server = spawn("bin/restart");
  server.stdout.on('data', function (data) {
    server_started = true;
    process.stdout.write("" + data);
  });

  server.stderr.on('data', function (data) {
    process.stdout.write("" + data);
  });

  server.on('close', function (code) {
    console.log('server closed: ' + code, "\n");
  });

  if (func)
    func();
}

function shutdown_all() {
  shutdown_server(function () {
    close();
  });
}

function close() {
  var w = watchers.pop();
  if (w) {
    w.close();
    close();
  } else {
    stop_stream = false;
    akui.quit();
  }
  // else {
    // process.exit(0);
  // }
}

restart_server();
process.on('SIGINT',  shutdown_all);
process.on('SIGTERM', shutdown_all);







