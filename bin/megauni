#!/usr/bin/env bash
# -*- bash -*-
#
#
dev="$IS_DEV"
action="$1"
shift

if [[ -z "$PORT" ]]; then
  export PORT=4567
fi

if [[ -n "$IS_DEV" ]]; then
  dir="$(pwd)"
  export JAR="$dir/tmp/cookies.txt"
  export PID="$dir/tmp/{$PORT}.pid"
  export LOG="$dir/tmp/log.txt"
fi

export MODEL="$MODEL"
export USE_SERVER="${USE_SERVER:+"yes"}"
export MOCHA="${MOCHA}"
export SPECS="$SPECS"
export RUN_FAST="${RUN_FAST}"

set -u -e -o pipefail

while [[ -n "$@" ]] ; do
  current_loop="$@"
  case $1 in
    --mocha)
      shift
      mocha=""
      while [[ -n "$@"  ]]; do
        if [[ "$1" == '--' ]]; then
          shift
          break;
        fi
        if [[ "$1" == *\ * ]]; then
          mocha="$mocha \"$1\""
        else
          mocha="$mocha $1"
        fi
        shift
      done
      export MOCHA="$mocha"
      ;;

    fast)
      shift
      export RUN_FAST="yes"
      ;;

    no_server)
      shift
      export USE_SERVER=""
      ;;

    use_server)
      shift
      export USE_SERVER="yes"
      ;;

    *)
      if [[ -d Server/$1 ]]; then
        export MODEL="$1"
        shift
      fi
      if [[ -n "$MODEL" && -n "$@" ]]; then
        specs=(Server/$MODEL/specs/*-$1.js)
        if [[ ! -f "${specs[0]}" ]]; then
          specs=()
        else
          shift
          export SPECS="${specs[@]}"
        fi
      fi

      ;;
  esac

  if [[ "$@" == "$current_loop" ]]; then
    break;
  fi
done # === while

js_files="$(echo -e ./*.js Server/*/specs/*.js Server/Megauni/*.js Server/Screen_Name/*.js Server/User/*.js Server/Root/*.js)"

# ==============================================================
GREEN=$(tput setaf 2)
RED='\e[0;31m'
RESET_COLOR=$(tput sgr0)
GREEN_BG=$(tput setb 2)
WHITE=$(tput setaf 7)
BOLD_WHITE_ON_GREEN=$(tput bold)${WHITE}${GREEN_BG}
BOLD_WHITE=$(tput bold)${WHITE}
ORANGE='\e[0;33m'
BG_RED='\e[1;31m'
# ===============================================

mods=(
  User
  Screen_Name
  Computer
  Link
  Session
)
  # File_Name
  # Label
  # Consume
  # Computer

# === Create a reverse of the list.
rev_mods=()
for (( idx=${#mods[@]}-1 ; idx >= 0 ; idx-- ))
do
  rev_mods+=( "${mods[idx]}" )
done
# ===============================================

case "$action" in

  help|--help)
    echo ""
    echo "  $  start"
    echo "  $  stop"
    echo "  $  restart"
    echo "  $  watch"
    echo ""
    echo "  $  migrate"
    echo "  $  migrate   up"
    echo "  $  migrate   down"
    echo "  $  migrate   reset"
    echo "  $  migrate   reset   MODEL"
    echo "  $  migrate   default_data"
    echo "  $  migrate   create  MODEL name"
    echo "  $  migrate   status"
    echo ""
    echo "  $  model_list"
    echo "  $  model_list  rsort"
    echo ""
    echo "  $  test"
    echo "  $  test reset"
    echo "  $  test Model spec"
    echo ""
    echo "  $  iojs"
    echo "  $  iojs ...."
    echo "  $  npm  ...."
    echo "  $  npm  --save ...."
    echo ""
    echo "  $  render name"
    echo "  $  render file_name"
    echo ""
    echo "  $  POST  \"{.. JSON .. }\"  /path"
    echo ""
    exit 0
    ;;

  "model_list")
    if [[ "$@" == "rsort" ]]; then
      for (( idx=${#mods[@]}-1 ; idx >= 0 ; idx-- ))
      do
        echo "${mods[idx]}"
      done
    else
      for i in ${mods[@]}
      do
        echo "$i"
      done
    fi
    ;;


  "iojs")
    iojs --es_staging "$@"
    ;;

  "shotgun")
    bundle exec shotgun \
      --server      thin                 \
      --env         production           \
      --public      Public/              \
      --port        4567                 \
      $@                                 \
      configs/config.ru
    ;;

  "thin")
    bundle exec thin \
      --environment production           \
      --log         tmp/log.log          \
      --pid         tmp/4567.thin.pid    \
      --rackup      configs/config.ru    \
      --port        4567                 \
      $@
    ;;

  "stop")
    $0 pm2 stop megauni.pm2.json5 "$@"
    ;;

  "restart")
    if [[ -n "$dev" && -z "$USE_SERVER" ]]; then
      exit 0
    fi
    $0 pm2 restart megauni.pm2.json5 "$@"
    ;;

  "status")
    $0 pm2 status megauni.pm2.json5 "$@"
    ;;

  "start")
    if [[ -n "$dev" && -z "$USE_SERVER" ]]; then
      exit 0
    fi
    PORT=$PORT $0 pm2 startOrGracefulReload megauni.pm2.json5 "$@"
    exit 0

    dir="$(pwd)/tmp"
    args=""
    if [[ ! -z "$dev" ]]; then
      args=" \
      --ssl --ssl-certificate $dir/ssl/server.crt \
      --ssl-certificate-key   $dir/ssl/server.key \
      --ssl-port 4568"
    fi

    if [[ ! -z "$dev" && ! -d tmp/ssl ]]; then
      folder="tmp/ssl"
      mkdir -p "$folder"
      cd $folder

      openssl genrsa -des3 -out server.key 1024

      # === For now, leave the challenge password and
      # company name blank.
      openssl req     -new -key server.key -out server.csr

      # === Remove password
      cp server.key server.key.org
      openssl rsa -in server.key.org -out server.key

      # === Generate a Self-Signed Certificate
      openssl x509 -req -days 30 -in server.csr -signkey server.key -out server.crt

      # sudo chown root:root server.*

      chmod 400 server.*
    fi

    # puma --config configs/puma.rb configs/config.ru


    # More options at:
    # https://github.com/phusion/passenger/blob/master/lib/phusion_passenger/standalone/start_command.rb
    RACK_ENV=production bundle exec passenger start   \
      $args                                           \
      --pid-file=$dir/4567.pid                        \
      --log-file=$dir/4567.log                        \
      --port 4567                                     \
      --rackup configs/config.ru                      \
      --static-files-dir      $dir/../Public
    ;;

  "migrate")
    if [[ -z "$@" ]]; then
      sub_action="up"
    else
      sub_action="$1"
      shift
    fi

    case "$sub_action" in
      "create")
        model="$1"
        name="$2"
        shift
        shift
        cd Server
        duck_duck_duck create $model $name
        ;;

      "reset")
        model="$@"

        bin/megauni migrate down "$model"
        bin/megauni migrate up   "$model"
        echo ""
        # if [[ -z "$model" ]]; then
          # ALLOW_BANNED_SCREEN_NAME=true bin/megauni migrate default_data
        # fi
        # echo -e "\n===== DONE =====\n"
        ;;

      "default_data")
        bin/migrate_default_data
        ;;

      "status")
        script="
          require 'sequel'
          DB = Sequel.connect('$DATABASE_URL')
          if DB.table_exists?(:_schema)
            rows = []
            DB.from(:_schema).each { |r|
              rows << r
              puts r.inspect
            }
            puts '== No records found.' if rows.empty?
          else
            puts '== Table not found.'
          end
        "
        ruby -e "$script"
        ;;

      "up")
        model="$@"

        if [[ -z "$model" ]]
        then
          for m in ${mods[@]}
          do
            bin/megauni migrate up $m
          done
          echo -e "\n=== Done.\n"
        else
          cd Server
          echo ""
          duck_duck_duck up $model
        fi
        ;;

      "down")
        model="$@"

        if [[ -z "$model" ]]
        then

          # === Ensure dev machine.
          if [ ! -n "${IS_DEV+x}" ]
          then
            echo "This is not a dev machine."
            exit 1
          fi

          # === Reverse list
          for m in ${rev_mods[@]}
          do
            bin/megauni migrate down $m
          done

        else
          cd Server
          echo ""
          duck_duck_duck down $model
        fi
        ;;

      *)
        echo "Unknown command for migrate: $sub_action"
        exit 1
        ;;
    esac # === sub_action
    ;;

  "highlight_ruby")
    while read i
    do
      code="$(echo "$i" | cut -d' ' -f9 || echo '')"
      path="$(echo "$i" | cut -d' ' -f7 || echo '')"
      if [[ ! -z "$code" && "$code" =~ $re ]]; then
        if [[ "$code" -gt 199 && "$code" -lt 300 ]]; then
          color="$GREEN"
        fi
        if [[ "$code" -gt 299 && "$code" -lt 400 ]]; then
          color="$ORANGE"
        fi
        if [[ "$code" -gt 399 && "$code" -lt 500 ]]; then
          color="$RED"
        fi
        if [[ "$code" -gt 499 ]]; then
          color="$BRED"
        fi
        color_code="${i/" $code "/"${color} ${code} ${RESET_COLOR}"}"
        echo -e "${color_code/"$path "/"${color}$path ${RESET_COLOR}"}"
      else
        if [[ ! ( "$i" == *ruby* ) ]]; then
          if [[ "$i" =~ ':in ' ]]; then
            echo -e "${RED}$i${RESET_COLOR}"
          else
            echo -e "$i"
          fi
        fi
      fi
    done # === while read output
    ;;

  "test")
    files=""
    model=""
    spec=""
    reset=""
    watch=""

    if [[ "$@" =~ 'watch' && "$1" == "watch" ]]; then
      watch="true"
      shift
      echo "=== Watching $(basename $0) (proc $$): $@"
    fi

    if [[ ! -z "$@" && "$1" == "reset" ]]; then
      reset="true"
      shift
    fi

    if [[ ! -z "$@" && -d "Server/$1" ]]; then
      model="$1"
      files="$(echo Server/$model/specs/*-*.rb)"
      shift
    fi

    if [[ ! -z "$@" ]]; then
      temp="$(find Server/$model/specs -regextype posix-extended -regex ".*/[0-9]{1,4}-${1}.rb")"
      if [[ -f "$temp" ]]; then
        spec="$1"
        shift
        files="$temp"
      fi
    fi

    if [[ -z "$files" ]]; then
      files="\
        Server/Customer/specs/01-create.rb    \
        Server/Screen_Name/specs/01-create.rb \
        Server/Computer/specs/01-create.rb    \
        Server/Link/specs/01-create.rb        \
        Server/Link/specs/02-read.rb"
    fi

    if [[ -z "$files" ]]; then
      colorize yellow "No tests found." 1>&2
      exit 0
    fi

    # if [[ -z "$model" && -z "$spec" ]]; then
      # # === Stop the server at the end
      # trap "bin/megauni stop" EXIT

      # # === Start server:
      # bin/megauni start
    # fi # === if start server

    # === Migrate: ==========================================
    if [[ ! -z "$@" && "$1" == "reset" ]]; then
      reset="true"
      shift
    fi

    if [[ ! -z "$reset" ]]; then
      bin/megauni migrate reset # > /dev/null
    fi
    # =======================================================

    cmd="bundle exec bacon Server/specs/helpers.rb $files"

    if [[ -z "$watch" ]]; then
      $cmd "$@"
    else
      echo "=== Running tests:"
      $cmd "$@" || true
      inotifywait -q -m -e close_write,close --exclude .git/ -r .  | while read CHANGE
      do
        dir=$(echo "$CHANGE" | cut -d' ' -f 1)
        op=$(echo "$CHANGE" | cut -d' ' -f 2)
        file=$(echo "$CHANGE" | cut -d' ' -f 3)
        path="${dir}$file"

        if [[ ! ( "$op" =~ "NOWRITE" ) && ( "$op" =~ "CLOSE" || "$op" =~ "WRITE" )  && ( "$file" =~ ".rb" || "$file" =~ ".lock") ]]; then
        echo "=== Running tests: $op"
        $cmd "$@" || true
      fi

      done # === inotifywait
    fi
    ;;


  "json")
    node_modules/json/lib/json.js "$@"
    ;;

  "running?")
    stat="$(bin/megauni pm2 jlist | bin/megauni json '[0].pm2_env.status')"
    if [[ "$stat" == 'online' ]]; then
      exit 0
    else
      exit 1
    fi
    ;;

  jshint)
    IFS=$' '
    for file in $js_files
    do
      if [[ -f $file ]]; then
        js_setup jshint $file
      fi
    done
    ;;

  "run_specs")
    if [[ -z "$dev" ]]; then
      exit 0
    fi

    if [[ -z "$@" ]]; then
      args="$SPECS"
    else
      args="$@"
    fi

    if [[ -n "$args" ]]; then
      eval $0 mocha "$MOCHA" "$args" || echo -e "=== ${RED}FAIL${RESET_COLOR} ==="
    fi
    ;;

  "__watch")
    $0 run_specs || :

    eval "$(bash_setup setup_traps)"
    setup_traps

    echo -e "=== Watching ${BOLD_WHITE}$(basename $0)${RESET_COLOR}    (proc $$)..."
    while read CHANGE
    do
      dir=$(echo "$CHANGE" | cut -d' ' -f 1)
      op=$(echo "$CHANGE" | cut -d' ' -f 2)
      file=$(echo "$CHANGE" | cut -d' ' -f 3)
      path="${dir}$file"
      file=$(basename $path)

      echo -e "=== $CHANGE ($path)"

      if [[ ! -z "$file" ]]; then

        if [[ "$path" == *bin/megauni* ]]; then
          echo ""
          echo "=== ${GREEN}Reloading${RESET_COLOR} this script: $0 $action"
          exec $0 $action
        fi

        if [[ "$file" == *.js ]]; then
          js_pass="true"
          js_setup jshint! $path || js_pass=""

          if [[ -n "$js_pass" ]]; then
            $0 run_specs $@ || :
            bin/megauni restart
          fi # === if $js_pass

        fi # === if $file == *.js

      fi

      echo ""
    done < <(inotifywait --quiet --monitor --event close_write  $js_files $(git ls-files | grep -E "\.js$|bin\/megauni" | tr '\n' ' '))
    ;;

  "watch")

    eval "$(bash_setup setup_traps)"
    setup_traps

    # === Regular expression:
    IFS=$'\n'
    re='^[0-9]+$'
    # === Start server:

    echo -e "=== $(basename $0): Proc: $$ Proc Group: $(bash_setup proc_group $$)"
    if [[ -z "$RUN_FAST" ]] ; then
      $0 jshint
    fi
    if [[ -n "$USE_SERVER" ]]; then
      ( bin/megauni __watch ) &
      bin/megauni start --no-daemon
    else
      bin/megauni __watch "$@"
    fi

    ;;

  "POST")
    curl -k -X POST --header "Content-Type:application/json" -d "$1" http://localhost:4567$2
    echo ""
    ;;

  "deploy")
    apt-cache show libpg-dev 1>/dev/null || (
      echo "=== Installing libpg-dev..."
      sudo apt-get install libpq-dev
    )
    npm install
    ;;

  "mocha")
    js_setup mocha --require co-mocha "$@"
    ;;

  *)

    file="$( echo node_modules/*/bin/$action )"
    args="$@"

    if [[ -f "$file"  ]]; then
      $file "$@"
      exit 0
    fi

    echo "Unknown action: $action" 1>&2
    exit 1
    ;;

esac # === case $action



