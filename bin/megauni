#!/usr/bin/env bash
# -*- bash -*-
#
#
THIS_DIR="$(mksh_setup dirname_of_bin "$0")"
PORT="${PORT:-4567}"
action="$1"; shift

IS_DEV="$IS_DEV"
if [[ -n "$IS_DEV" ]]; then
  dir="$(pwd)"
  export JAR="$dir/tmp/cookies.txt"
  export PID="$dir/tmp/{$PORT}.pid"
  export LOG="$dir/tmp/log.txt"
fi

export MODEL="$MODEL"
export USE_SERVER="$USE_SERVER"
export MOCHA="${MOCHA}"
export SPECS="$SPECS"
export RUN_FAST="${RUN_FAST}"

set -u -e -o pipefail

mods=(
  Megauni
  Screen_Name
  User
  Log_In
  Card
  Link
)

# === Create a reverse of the list.
rev_mods=()
for (( idx=${#mods[@]}-1 ; idx >= 0 ; idx-- ))
do
  rev_mods+=( "${mods[idx]}" )
done
# ===============================================

case "$action" in

  help|--help)
    mksh_setup print_help $0
    exit 0
    ;;

  "type_names")
    # === bash> type_names
    # ===    ME_ONLY
    # ===    ...
    IFS=$'\n'
    for line in $(cat lib/Link/migrates/__-link_type_id.sql)
    do
      if [[ $line =~ ^[[:space:]]+WHEN[[:space:]]+.+THEN ]]; then
        IFS="'" read -ra WORDS <<< "$line"
        code="$(bash_setup string_to_num "${WORDS[1]}")"

        start_keeping=""
        comment=""
        while read -n1 comm_char; do
          if [[ -n "$start_keeping" ]] ; then
            comment="${comment}${comm_char}"
          else
            if [[ "$comm_char" == "-"  ]]; then
              comment="-"
              start_keeping="yes"
            fi;
          fi;
        done < <(echo -n "$line")

        IFS=' -- ' read -ra COMMENTS <<< "$line"
        # echo "${WORDS[1]} $code ${comment}"
        echo "WHEN '${WORDS[1]}'    THEN RETURN $code; $comment"
      fi

    done
    ;;

  "js_applet")
    app_dir="Public/applets"
    mkdir -p $app_dir/$1
    file="$app_dir/$1/script.js"
    if [[ -f $file ]]
    then
      echo "=== Already exists: $file"
      exit 0
    fi
      echo -e "\"use strict\";\n" >> $file

    echo "Created: $file"
    ;;

  "start as node app")
    if [[ -n "$dev" && -z "$USE_SERVER" ]]; then
      echo "=== Not starting server."
      exit 0
    fi
    PORT=$PORT $0 pm2 startOrGracefulReload megauni.pm2.json5 "$@"
    exit 0

    dir="$(pwd)/tmp"
    args=""
    if [[ ! -z "$dev" ]]; then
      args=" \
      --ssl --ssl-certificate $dir/ssl/server.crt \
      --ssl-certificate-key   $dir/ssl/server.key \
      --ssl-port 4568"
    fi

    if [[ ! -z "$dev" && ! -d tmp/ssl ]]; then
      folder="tmp/ssl"
      mkdir -p "$folder"
      cd $folder

      openssl genrsa -des3 -out server.key 1024

      # === For now, leave the challenge password and
      # company name blank.
      openssl req     -new -key server.key -out server.csr

      # === Remove password
      cp server.key server.key.org
      openssl rsa -in server.key.org -out server.key

      # === Generate a Self-Signed Certificate
      openssl x509 -req -days 30 -in server.csr -signkey server.key -out server.crt

      # sudo chown root:root server.*

      chmod 400 server.*
    fi

    # puma --config configs/puma.rb configs/config.ru


    # More options at:
    # https://github.com/phusion/passenger/blob/master/lib/phusion_passenger/standalone/start_command.rb
    RACK_ENV=production bundle exec passenger start   \
      $args                                           \
      --pid-file=$dir/4567.pid                        \
      --log-file=$dir/4567.log                        \
      --port 4567                                     \
      --rackup configs/config.ru                      \
      --static-files-dir      $dir/../Public
    ;;

  "highlight_ruby")
    while read i
    do
      code="$(echo "$i" | cut -d' ' -f9 || echo '')"
      path="$(echo "$i" | cut -d' ' -f7 || echo '')"
      if [[ ! -z "$code" && "$code" =~ $re ]]; then
        if [[ "$code" -gt 199 && "$code" -lt 300 ]]; then
          color="$GREEN"
        fi
        if [[ "$code" -gt 299 && "$code" -lt 400 ]]; then
          color="$ORANGE"
        fi
        if [[ "$code" -gt 399 && "$code" -lt 500 ]]; then
          color="$RED"
        fi
        if [[ "$code" -gt 499 ]]; then
          color="$BRED"
        fi
        color_code="${i/" $code "/"${color} ${code} ${RESET_COLOR}"}"
        echo -e "${color_code/"$path "/"${color}$path ${RESET_COLOR}"}"
      else
        if [[ ! ( "$i" == *ruby* ) ]]; then
          if [[ "$i" =~ ':in ' ]]; then
            echo -e "${RED}$i${RESET_COLOR}"
          else
            echo -e "$i"
          fi
        fi
      fi
    done # === while read output
    ;;

  "__watch")
    $0 test $@ || :

    eval "$(bash_setup setup_traps)"
    setup_traps

    echo -e "=== Watching ${BOLD_WHITE}$(basename $0)${RESET_COLOR}    (proc $$)..."
    while read -r CHANGE
    do
      dir=$(echo "$CHANGE" | cut -d' ' -f 1)
      op=$(echo "$CHANGE" | cut -d' ' -f 2)
      file=$(echo "$CHANGE" | cut -d' ' -f 3)
      path="${dir}$file"
      file=$(basename $path)

      echo -e "=== $CHANGE ($path)"

      if [[ ! -z "$file" ]]; then

        if [[ "$path" == *bin/megauni* ]]; then
          break
        fi

        if [[ "$file" == *.sql ]]; then
          ( bin/megauni migrate up "$(basename $(dirname $(dirname "$path")))" && $0 test $@ ) || :
        else
          if [[ "$file" == *.js ]]; then
            js_pass="true"
            js_setup jshint! $path || js_pass=""

            if [[ -n "$js_pass" ]]; then
              $0 run_specs $@ || :
              bin/megauni restart
            fi # === if $js_pass
          else
            if [[ "$path" == *.json ]]; then
              (js_setup jshint! $path && $0 test $@)  || :
            else
              $0 test $@ || :
            fi
          fi # === if $file == *.js
        fi


      fi # === if $file

      echo ""
    done < <(inotifywait --quiet --monitor --event close_write -r lib/ -r specs/ $(git ls-files | grep -E "\.js$|bin\/megauni" | tr '\n' ' '))

    echo ""
    echo "=== ${GREEN}Reloading${RESET_COLOR} this script: $0 $action"
    exec $0 $action $@
    ;;

  "watch")
    # === watch

    # === temporary convenience
    export RUN_FAST="yes"

    eval "$(bash_setup setup_traps)"
    setup_traps

    # === Regular expression:
    IFS=$'\n'
    re='^[0-9]+$'
    # === Start server:

    echo -e "=== $(basename $0): Proc: $$ Proc Group: $(bash_setup proc_group $$)"

    if [[ -z "$RUN_FAST" ]] ; then
      $0 jshint
    fi

    if [[ -z "$USE_SERVER" ]]; then
      echo "=== Skipping server."
      bin/megauni __watch "$@"

    else
      ( bin/megauni __watch ) &
      sleep 1
      exit_code=-1
      while [[ "$exit_code" != "0" ]]
      do
        if [[ -f "/tmp/specs.are.running" ]]; then
          sleep 0.5
        else
          bin/megauni start || exit_code=$?
        fi
      done
      echo "=== Done looping server."
    fi # === if -z $USE_SERVER

    ;;

  "deploy")
    sudo apt-get install erlang-dev
    apt-cache show libpg-dev 1>/dev/null || (
      echo "=== Installing libpg-dev..."
      sudo apt-get install libpq-dev
    )
    npm install
    ;;

  "mocha")
    js_setup mocha --require co-mocha "$@"
    ;;

  *)
    # === IF: bin/lib file:
    func_file="$THIS_DIR/bin/lib/${action}.sh"
    if [[ -s "$func_file" ]]; then
      source "$func_file"
      "$action" $@
      exit 0
    fi

    file="$( echo node_modules/*/bin/$action )"
    args="$@"

    if [[ -f "$file"  ]]; then
      $0 iojs $file "$@"
      exit 0
    fi

    echo "Unknown action: $action" 1>&2
    exit 1
    ;;

esac # === case $action



