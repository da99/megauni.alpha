#!/usr/bin/env node

var ups = [], downs = [], temp = [];

downs.push('DROP TABLE IF EXISTS bot_chat');
downs.push('DROP TABLE IF EXISTS customers');
downs.push('DROP TABLE IF EXISTS screen_names');
downs.push('DROP TABLE IF EXISTS consumers');
downs.push('DROP TABLE IF EXISTS masks');

temp.push(' \
   CREATE TABLE IF NOT EXISTS bot_chat ( \
    id serial,   \
    date bigint, \
    msg text,    \
    author varchar(20) \
)');

ups.push(" \
 CREATE TABLE IF NOT EXISTS customers ( \
   id varchar(15) NOT NULL UNIQUE, \
   created_at timestamp default (now() AT TIME ZONE 'UTC'),  \
   trashed_at timestamp default null,   \
   email text,                 \
   passphrase_hash varchar(100) NOT NULL \
)");

ups.push( " \
 CREATE TABLE IF NOT EXISTS screen_names ( \
   id varchar(15) NOT NULL UNIQUE,   \
   customer_id varchar(15) NOT NULL, \
   created_at timestamp default (now() AT TIME ZONE 'UTC'),  \
   trashed_at timestamp default null,   \
   screen_name varchar(15) NOT NULL UNIQUE \
)");


// ==========================================================================================

var cmd   = (process.argv[2] || 'nothing')
, do_up   = (cmd === 'up' || cmd === 'reset')
, do_down = (cmd === 'down' || cmd === 'reset');
if (!do_up && !do_down) {
  console.log('Unknown cmd: ' + process.argv[2]);
  process.exit(1);
}

var db             = require('okdoki/lib/DB');
var pg_client      = db.new_pg_client();
var show_databases = db.show_databases;
var _ = require('underscore');

show_databases(function (meta) {

  var i = -1, l = meta.rows.length, names = _.pluck(meta.rows, 'name');
  while( ++i < l ) {
    if (names[i].indexOf('customer-') === 0 || names[i].indexOf('customer_') === 0) {
      downs.push('DROP DATABASE "' + names[i] + '"' );
    };
  };


  var qs = [];

  if (do_down) {
    qs = qs.concat(downs);
  } // === do_down

  if (do_up) {
    qs = qs.concat(ups);
  } // === do_up


  var count = qs.length;
  function run_qs() {

    if (count === 0) {
      console.log('Finished migrating the db.');
      pg_client.end();
      return false;
    }

    pg_client.query(qs.shift(), function(err, result) {
      show_db_results(err, result);
      --count;
      run_qs();
    });

  }

  run_qs();

}); // === show_databases


function show_db_results(err, result) {
  if (err) {
    console.log('SQL Error: ', err);
    process.exit(1);
  };

  return true;
}

console.log('Process id: ' + process.pid);
