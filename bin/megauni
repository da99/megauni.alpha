#!/usr/bin/env bash
# -*- bash -*-
#
#
action="$1"
shift

dev="$IS_DEV"
if [[ ! -z "$IS_DEV" ]]; then
  dir="$(pwd)"
  export PORT=4567
  export JAR="$dir/tmp/cookies.txt"
  export PID="$dir/tmp/{$PORT}.pid"
  export LOG="$dir/tmp/log.txt"
fi

set -u -e -o pipefail

export RACK_ENV="production"

# ==============================================================
# http://www.ibm.com/developerworks/aix/library/au-learningtput/
green_bg=$(tput setb 2)
white=$(tput setaf 7)
bold_white_on_green=$(tput bold)${white}${green_bg}
bold_white=$(tput bold)${white}
reset_color=$(tput sgr0)
# ==============================================================

# ===============================================
mods=(
  Customer
  Screen_Name
)
  # File_Name
  # Label
  # Consume
  # Computer

# === Create a reverse of the list.
rev_mods=()
for (( idx=${#mods[@]}-1 ; idx >= 0 ; idx-- ))
do
  rev_mods+=( "${mods[idx]}" )
done
# ===============================================

case "$action" in

  "help")
    echo ""
    echo "  $  start"
    echo "  $  stop"
    echo "  $  watch"
    echo ""
    echo "  $  migrate"
    echo "  $  migrate   up"
    echo "  $  migrate   down"
    echo "  $  migrate   reset"
    echo "  $  migrate   reset   MODEL"
    echo "  $  migrate   default_data"
    echo "  $  migrate   status"
    echo ""
    echo "  $  model_list"
    echo "  $  model_list  rsort"
    exit 0
    ;;

  "model_list")
    if [[ "$@" == "rsort" ]]; then
      for (( idx=${#mods[@]}-1 ; idx >= 0 ; idx-- ))
      do
        echo "${mods[idx]}"
      done
    else
      for i in ${mods[@]}
      do
        echo "$i"
      done
    fi
    ;;


  "shotgun")
    bundle exec shotgun \
      --server      thin                 \
      --env         production           \
      --public      Public/              \
      --port        4567                 \
      $@                                 \
      configs/config.ru
    ;;

  "thin")
    bundle exec thin \
      --environment production           \
      --log         tmp/log.log          \
      --pid         tmp/4567.thin.pid    \
      --rackup      configs/config.ru    \
      --port        4567                 \
      $@
    ;;

  "start")
    dir="$(pwd)/tmp"
    args=""
    if [[ ! -z "$dev" ]]; then
      args=" \
      --ssl --ssl-certificate $dir/ssl/server.crt \
      --ssl-certificate-key   $dir/ssl/server.key \
      --ssl-port 4568"
    fi

    if [[ ! -z "$dev" && ! -d tmp/ssl ]]; then
      folder="tmp/ssl"
      mkdir -p "$folder"
      cd $folder

      openssl genrsa -des3 -out server.key 1024

      # === For now, leave the challenge password and
      # company name blank.
      openssl req     -new -key server.key -out server.csr

      # === Remove password
      cp server.key server.key.org
      openssl rsa -in server.key.org -out server.key

      # === Generate a Self-Signed Certificate
      openssl x509 -req -days 30 -in server.csr -signkey server.key -out server.crt

      # sudo chown root:root server.*

      chmod 400 server.*
    fi

    # puma --config configs/puma.rb configs/config.ru


    # More options at:
    # https://github.com/phusion/passenger/blob/master/lib/phusion_passenger/standalone/start_command.rb
    RACK_ENV=production bundle exec passenger start   \
      $args                                           \
      --pid-file=$dir/4567.pid                        \
      --log-file=$dir/4567.log                        \
      --port 4567                                     \
      --rackup configs/config.ru                      \
      --static-files-dir      $dir/../Public
    ;;

  "stop")
    echo "not done yet" 1>&2
    ;;

  "migrate")
    sub_action="$1"
    shift
    if [[ -z "$sub_action" ]]; then
      sub_action="up"
    fi

    case "$sub_action" in
      "reset")
        model="$@"

        bin/megauni migrate down "$model"
        bin/megauni migrate up   "$model"
        echo ""
        # if [[ -z "$model" ]]; then
          # ALLOW_BANNED_SCREEN_NAME=true bin/megauni migrate default_data
        # fi
        # echo -e "\n===== DONE =====\n"
        ;;

      "default_data")
        bin/migrate_default_data
        ;;

      "status")
        script="
          require 'sequel'
          DB = Sequel.connect('$DATABASE_URL')
          if DB.table_exists?(:_schema)
            rows = []
            DB.from(:_schema).each { |r|
              rows << r
              puts r.inspect
            }
            puts '== No records found.' if rows.empty?
          else
            puts '== Table not found.'
          end
        "
        ruby -e "$script"
        ;;

      "up")
        model="$@"

        if [[ -z "$model" ]]
        then
          for m in ${mods[@]}
          do
            bin/megauni migrate up $m
          done
        else
          cd Server
          echo ""
          bundle exec duck_duck_duck up $model
        fi
        ;;

      "down")
        model="$@"

        if [[ -z "$model" ]]
        then

          # === Ensure dev machine.
          if [ ! -n "${IS_DEV+x}" ]
          then
            echo "This is not a dev machine."
            exit 1
          fi

          # === Reverse list
          for m in ${rev_mods[@]}
          do
            bundle exec bin/megauni migrate down $m
          done

        else
          cd Server
          echo ""
          bundle exec duck_duck_duck down $model
        fi
        ;;

      *)
        echo "Unknown command for migrate: $sub_action"
        exit 1
        ;;
    esac # === sub_action
    ;;

  "test")
    files=""
    model=""
    spec=""
    reset=""

    if [[ ! -z "$@" && "$1" == "reset" ]]; then
      reset="true"
      shift
    fi

    if [[ ! -z "$@" && -d "Server/$1" ]]; then
      model="$1"
      files="$(echo Server/$model/specs/*-*.rb)"
      shift
    fi

    if [[ ! -z "$@" && -f "$(echo -n Server/$model/specs/*-${1}.rb)" ]]; then
      spec="$1"
      files="$(echo Server/$model/specs/*-${spec}.rb)"
      shift
    fi

    if [[ -z "$model" && -z "$spec" ]]; then
      files="$(echo Server/*/specs/*-*.rb)"
    fi

    if [[ -z "$files" ]]; then
      colorize yellow "No tests found." 1>&2
      exit 0
    fi

    if [[ -z "$model" && -z "$spec" ]]; then
      # === Stop the server at the end
      trap "bin/server stop" EXIT

      # === Start server:
      bin/megauni start
    fi # === if start server

    # === Migrate: ==========================================
    if [[ ! -z "$@" && "$1" == "reset" ]]; then
      reset="true"
      shift
    fi

    if [[ ( ! -z "$reset" ) || ( -z "$model" && -z "$spec" ) ]]; then
      bin/megauni migrate reset "$model" # > /dev/null
    fi
    # =======================================================

    bundle exec bacon Server/specs/helpers.rb $files "$@"
    exit 0
    ;;

  "watch")
    cleanup () {
      echo -e "\n\n=== Please wait... shutting down thin..."
      bin/megauni thin stop
      echo -e "=== Done.\n"
    }
    trap cleanup SIGINT SIGTERM

    if [[ ! -f tmp/4567.thin.pid ]]; then
      echo === Starting server:
      bin/megauni thin -d start
    fi


    IFS=$'\n'
    re='^[0-9]+$'

    # From: http://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux
    Color_Off='\e[0m'
    BRed='\e[1;31m'
    Red='\e[0;31m'
    Green='\e[0;32m'
    Orange='\e[0;33m'

    old_log="$(cat tmp/log.log || echo "")"

    echo "=== Watching:"
    inotifywait -q -m -e modify,close_write,close --exclude .git/ -r .  | while read CHANGE
    do
      dir=$(echo "$CHANGE" | cut -d' ' -f 1)
      op=$(echo "$CHANGE" | cut -d' ' -f 2)
      file=$(echo "$CHANGE" | cut -d' ' -f 3)
      path="${dir}$file"

      if [[ "$op" == "MODIFY" && "$file" == "log.log" ]]; then
          new_log="$(cat tmp/log.log)"
          output=${new_log/"$old_log"}
          for i in $output; do
            code="$(echo "$i" | cut -d' ' -f9 || echo '')"
            path="$(echo "$i" | cut -d' ' -f7 || echo '')"
            if [[ ! -z "$code" && "$code" =~ $re ]]; then
              if [[ "$code" -gt 199 && "$code" -lt 300 ]]; then
                color="$Green"
              fi
              if [[ "$code" -gt 299 && "$code" -lt 400 ]]; then
                color="$Orange"
              fi
              if [[ "$code" -gt 399 && "$code" -lt 500 ]]; then
                color="$Red"
              fi
              if [[ "$code" -gt 499 ]]; then
                color="$BRed"
              fi
              color_code="${i/" $code "/"${color} ${code} ${Color_Off}"}"
              echo -e "${color_code/"$path "/"${color}$path ${Color_Off}"}"
            else
              if [[ ! ( "$i" == *ruby* ) ]]; then
                if [[ "$i" =~ ':in ' ]]; then
                  echo -e "${Red}$i${Color_Off}"
                else
                  echo -e "$i"
                fi
              fi
            fi
          done
          old_log="$new_log"
      fi # === if MODIFY log

      if [[ ( ! "$op" =~ "NOWRITE" ) && ( "$op" =~ "CLOSE" || "$op" =~ "WRITE" )  && ! -z "$file" ]]; then

        echo ""
        echo "=== $CHANGE"

        if [[ "$path" == *bin/megauni* ]]; then
          echo "=== Restarting this script"
          exec bin/megauni watch
        fi

        if [[ "$file" =~ ".rb" || "$file" =~ ".lock" ]]; then
          echo "=== Touching: tmp/restart.txt"
          touch tmp/restart.txt
          bin/megauni thin -d restart
        fi

        if [[ "$file" =~ ".js" ]]; then
          echo "=== Running jshint:"
          jshint $path || js_failed=""
        fi

      fi
    done
    ;;

  *)
    echo "Unknown action: $action" 1>&2
    exit 1
    ;;

esac # === case $action



