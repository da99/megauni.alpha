#!/usr/bin/env bash
#
#
#

FIRST_RUN="$FIRST_RUN"
CMD="$CMD"
set -u -e -o pipefail

if [[ -z "$IS_DEV" ]]
then
  echo "Not a dev machine." 1>&2
  exit 1000
fi

unicorn_pid () {
 pgrep -f "unicorn master" || echo ""
}


restart_server () {

  unicorn=/tmp/unicorn.dev.restart
  since=0

  if [[ -f $unicorn ]]
  then
    since="$(expr "$(date +%s)" - "$(stat $unicorn -c %Y)" )"
  fi

  touch $unicorn

  if [[ "$since" -gt "3" ]]
  then
    echo "=== $since seconds: Restarting the server..."
    pkill -f "unicorn master" || true
    bin/start &
    echo "Done"
  else
    echo "=== No restart: $since secs"
  fi

}

if [[ ! -z "$FIRST_RUN" ]]
then


  if [[ -z "$@" ]]
  then
    restart_server
  else
    bin/test "$@"
  fi

  exit 0
fi # === done first run

is_done=""

if [[ "$FILE" =~ ".js"  || "$FILE" == "bin/upgrade" ]] 
then
  is_done="true"
  bin/upgrade skip_npm skip_os skip_download
fi

if [[ "$FILE" =~ ".styl" ]]
then
  is_done="true"
  bin/compile_stylus "$FILE"
fi

if [[ "$FILE" =~ "Public/" && "$FILE" =~ ".rb"  && ! "$FILE" =~ "mustache." ]]
then
  is_done="true"
  $yellow "=== Please wait... compiling..."
  if [[ "$FILE" =~ "applets" ]]
  then
    bin/compile_html all
  else
    bin/compile_html $FILE
  fi
  $green $(restart_server)
fi

if [[ "$FILE" =~ "Server/" ]]
then
  is_done="true"

  if [[ ! -z "$@" ]]
  then
    bin/test "$@"
  else
    $green $(restart_server)
  fi

fi # === Server/ files


if [[ -z "$is_done" ]]
then
  echo "=== ignoring: $FILE"
fi


# trap cleanup SIGINT SIGTERM EXIT
