#!/usr/bin/env bash
# -*- bash -*-
#
#
action="$1"
shift

if [[ ! -z "$IS_DEV" ]]; then
  dir="$(pwd)"
  export PORT=4567
  export JAR="$dir/tmp/cookies.txt"
  export PID="$dir/tmp/{$PORT}.pid"
  export LOG="$dir/tmp/log.txt"
fi

set -u -e -o pipefail

export RACK_ENV="production"

# ==============================================================
# http://www.ibm.com/developerworks/aix/library/au-learningtput/
green_bg=$(tput setb 2)
white=$(tput setaf 7)
bold_white_on_green=$(tput bold)${white}${green_bg}
bold_white=$(tput bold)${white}
reset_color=$(tput sgr0)
# ==============================================================

# ===============================================
mods=(
  Customer
  Screen_Name
)
  # File_Name
  # Label
  # Consume
  # Computer

# === Create a reverse of the list.
rev_mods=()
for (( idx=${#mods[@]}-1 ; idx >= 0 ; idx-- ))
do
  rev_mods+=( "${mods[idx]}" )
done
# ===============================================

case "$action" in

  "help")
    echo ""
    echo "  $  start"
    echo "  $  stop"
    echo "  $  watch"
    echo ""
    echo "  $  migrate"
    echo "  $  migrate   up"
    echo "  $  migrate   down"
    echo "  $  migrate   reset"
    echo "  $  migrate   reset   MODEL"
    echo "  $  migrate   default_data"
    echo "  $  migrate   status"
    echo ""
    echo "  $  model_list"
    echo "  $  model_list  rsort"
    exit 0
    ;;

  "model_list")
    if [[ "$@" == "rsort" ]]; then
      for (( idx=${#mods[@]}-1 ; idx >= 0 ; idx-- ))
      do
        echo "${mods[idx]}"
      done
    else
      for i in ${mods[@]}
      do
        echo "$i"
      done
    fi
    ;;


  "start")
    # puma --config configs/puma.rb configs/config.ru
    dir="$(pwd)/tmp"
    RACK_ENV=production bundle exec passenger start --pid-file=$dir/4567.pid --log-file=$dir/4567.log --port 4567 --rackup configs/config.ru
    ;;

  "stop")
    echo "not done yet" 1>&2
    ;;

  "watch")
    echo "not done yet" 1>&2
    ;;

  "migrate")
    sub_action="$1"
    shift
    if [[ -z "$sub_action" ]]; then
      sub_action="up"
    fi

    case "$sub_action" in
      "reset")
        model="$@"

        bin/megauni migrate down "$model"
        bin/megauni migrate up   "$model"
        echo ""
        # if [[ -z "$model" ]]; then
          # ALLOW_BANNED_SCREEN_NAME=true bin/megauni migrate default_data
        # fi
        # echo -e "\n===== DONE =====\n"
        ;;

      "default_data")
        bin/migrate_default_data
        ;;

      "status")
        script="
          require 'sequel'
          DB = Sequel.connect('$DATABASE_URL')
          if DB.table_exists?(:_schema)
            rows = []
            DB.from(:_schema).each { |r|
              rows << r
              puts r.inspect
            }
            puts '== No records found.' if rows.empty?
          else
            puts '== Table not found.'
          end
        "
        ruby -e "$script"
        ;;

      "up")
        model="$@"

        if [[ -z "$model" ]]
        then
          for m in ${mods[@]}
          do
            bin/megauni migrate up $m
          done
        else
          cd Server
          echo ""
          bundle exec duck_duck_duck up $model
        fi
        ;;

      "down")
        model="$@"

        if [[ -z "$model" ]]
        then

          # === Ensure dev machine.
          if [ ! -n "${IS_DEV+x}" ]
          then
            echo "This is not a dev machine."
            exit 1
          fi

          # === Reverse list
          for m in ${rev_mods[@]}
          do
            bundle exec bin/megauni migrate down $m
          done

        else
          cd Server
          echo ""
          bundle exec duck_duck_duck down $model
        fi
        ;;

      *)
        echo "Unknown command for migrate: $sub_action"
        exit 1
        ;;
    esac # === sub_action
    ;;

  "test")
    files=""
    model=""
    spec=""
    reset=""

    if [[ ! -z "$@" && "$1" == "reset" ]]; then
      reset="true"
      shift
    fi

    if [[ ! -z "$@" && -d "Server/$1" ]]; then
      model="$1"
      files="$(echo Server/$model/specs/*-*.rb)"
      shift
    fi

    if [[ ! -z "$@" && -f "$(echo -n Server/$model/specs/*-${1}.rb)" ]]; then
      spec="$1"
      files="$(echo Server/$model/specs/*-${spec}.rb)"
      shift
    fi

    if [[ -z "$model" && -z "$spec" ]]; then
      files="$(echo Server/*/specs/*-*.rb)"
    fi

    echo $files
    exit 0

    if [[ -z "$files" ]]; then
      colorize yellow "No tests found." 1>&2
      exit 0
    fi

    if [[ -z "$model" && -z "$spec" ]]; then
      # === Stop the server at the end
      trap "bin/server stop" EXIT

      # === Start server:
      bin/megauni start
    fi # === if start server

    # === Migrate: ==========================================
    if [[ ! -z "$@" && "$1" == "reset" ]]; then
      reset="true"
      shift
    fi

    if [[ ( ! -z "$reset" ) || ( -z "$model" && -z "$spec" ) ]]; then
      bin/megauni migrate reset "$model" # > /dev/null
    fi
    # =======================================================

    bundle exec bacon Server/specs/helper.rb $files "$@"
    exit 0
    ;;

  *)
    echo "Unknown action: $action" 1>&2
    exit 1
    ;;

esac # === case $action



