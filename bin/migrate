#!/usr/bin/env node

// Create databases: okdoki

var db             = require('okdoki/lib/POSTGRESQL');
var show_databases = db.show_databases;
var _              = require('underscore');
var cmd            = (process.argv[2] || 'nothing');
var is_reset       = cmd === 'reset';
var is_up          = is_reset || cmd === 'up';
var is_down        = is_reset || cmd === 'down';
var is_list        = cmd === 'list';

if (!is_up && !is_down && !is_list) {
  console.log('Unknown cmd: ' + process.argv[2]);
  process.exit(1);
}

var tbls = new db.query();
tbls.show_tables(function (meta) {

  var names = _.pluck(meta.rows, 'name');

  if (cmd === 'list') {
    console.log('DBs: ' + names.join(', '));
    return true;
  }

  var ok = new db.query();

  if (is_down) {

    _.each(names, function (n, i) {
      if (n.indexOf('public.') === 0 ) {
        ok.q('DROP TABLE ' + n + '' );
      };
    });

    ok.q('DROP TABLE IF EXISTS bot_chat');
    ok.q('DROP TABLE IF EXISTS consumers');
    ok.q('DROP TABLE IF EXISTS masks');
    ok.q('DROP TABLE IF EXISTS comments');
  }


  if (is_up) {
    ok.q("CREATE EXTENSION IF NOT EXISTS plpython3u");

    ok.q(" \
         CREATE OR REPLACE FUNCTION public.json_get_varchar_array(j text, k text) \
           RETURNS varchar[] \
         AS $$    \
           import json; \
           return json.loads(j or '{}')[k]; \
         $$ LANGUAGE plpython3u; \
    ");

    ok.q(" \
         CREATE OR REPLACE FUNCTION public.json_get_text_array(j text, k text) \
           RETURNS text[] \
         AS $$    \
           import json; \
           return json.loads(j or '{}')[k]; \
         $$ LANGUAGE plpython3u; \
    ");

    ok.q(" \
         CREATE OR REPLACE FUNCTION public.json_get(j text, k text) \
           RETURNS text \
         AS $$    \
           import json; \
           return json.loads(j or '{}')[k]; \
         $$ LANGUAGE plpython3u; \
    ");

    ok.q(" \
         CREATE OR REPLACE FUNCTION public.json_merge(o text, n text) \
           RETURNS text \
         AS $$    \
           import json; \
           oj = json.loads(o or \"{}\");   \
           nj = json.loads(n or \"{}\");   \
           f  = dict(list(oj.items()) + list(nj.items())); \
           return json.dumps(f);         \
         $$ LANGUAGE plpython3u; \
    ");

    ok.q(" \
     CREATE TABLE IF NOT EXISTS customers ( \
       id varchar(15) NOT NULL UNIQUE, \
       created_at timestamp default (now() AT TIME ZONE 'UTC'),  \
       trashed_at timestamp default null,   \
       email text,                 \
       passphrase_hash varchar(100) NOT NULL \
    )");

    ok.q( " \
     CREATE TABLE IF NOT EXISTS screen_names ( \
       id varchar(15) NOT NULL UNIQUE,   \
       customer_id varchar(15) NOT NULL, \
       created_at timestamp default (now() AT TIME ZONE 'UTC'),  \
       trashed_at timestamp default null,   \
       screen_name varchar(15) NOT NULL UNIQUE \
    )");

    ok.q(" \
      CREATE TABLE IF NOT EXISTS comments ( \
        id                varchar(30) NOT NULL UNIQUE, \
        screen_name_id    varchar(15) NULL NULL, \
        conv_id           varchar(30) NOT NULL UNIQUE, \
        ref_id            varchar(30) NOT NULL UNIQUE, \
        settings          text,       \
        details           text,       \
        body              text NOT NULL,         \
        created_at        timestamp default (now() AT TIME ZONE 'UTC'),  \
        updated_at        timestamp default null, \
        trashed_at        timestamp default null  \
    )");

    ok.q(" \
      CREATE TABLE IF NOT EXISTS follows  ( \
        id                varchar(30) NOT NULL UNIQUE, \
        pub_id            varchar(15) NULL NULL, \
        screen_name_id    varchar(15) NULL NULL, \
        settings          text,       \
        details           text,       \
        body              text,         \
        created_at        timestamp default (now() AT TIME ZONE 'UTC'),  \
        trashed_at        timestamp default null \
    )");

    ok.q(" \
      CREATE TABLE IF NOT EXISTS contacts ( \
        id                varchar(30) NOT NULL UNIQUE, \
        owner_id          varchar(15) NULL NULL, \
        contact_id        varchar(15) NULL NULL, \
        settings          text,       \
        details           text,       \
        body              text,         \
        created_at        timestamp default (now() AT TIME ZONE 'UTC'),  \
        trashed_at        timestamp default null \
    )");

    ok.q(" \
      CREATE TABLE IF NOT EXISTS labels   ( \
        id                varchar(30) NOT NULL UNIQUE, \
        owner_id          varchar(15) NULL NULL, \
        label             varchar(40) NULL NULL, \
        created_at        timestamp default (now() AT TIME ZONE 'UTC'),  \
        trashed_at        timestamp default null \
        , UNIQUE (owner_id, label) \
    )");

    ok.q(" \
      CREATE TABLE IF NOT EXISTS labelings ( \
       id              varchar(30) NOT NULL UNIQUE, \
       pub_id          varchar(15) NOT NULL,        \
       label_id        varchar(30) NOT NULL, \
       created_at      timestamp default (now() AT TIME ZONE 'UTC'),  \
       trashed_at      timestamp default null   \
       , UNIQUE (pub_id, label_id) \
    )");

    ok.q(" \
      CREATE TABLE IF NOT EXISTS homepages ( \
       screen_name_id  varchar(15) NOT NULL UNIQUE, \
       settings        text,                 \
       details         text,                 \
       about           text  \
    )");

    ok.q(" \
      CREATE TABLE IF NOT EXISTS posts ( \
       id              varchar(30) NOT NULL UNIQUE, \
       pub_id          varchar(15) NOT NULL,        \
       section_id      smallint NOT NULL,    \
       settings        text,                 \
       details         text,                 \
       body            text,                 \
       created_at      timestamp default (now() AT TIME ZONE 'UTC'),  \
       updated_at      timestamp default null,  \
       trashed_at      timestamp default null   \
    )");
  }

  ok.run_and_then(function (meta) {
    console.log('Finished migrating the main db.');
  });

}); // === show_databases



// ==========================================================================================


console.log('Process id: ' + process.pid);




