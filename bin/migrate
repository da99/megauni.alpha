#!/usr/bin/env node

// Create databases: okdoki

var db             = require('okdoki/lib/POSTGRESQL');
var Customer       = require('okdoki/lib/Customer').Customer;
var Chat_Bot       = require('okdoki/lib/Chat_Bot').Chat_Bot;
var show_databases = db.show_databases;
var _              = require('underscore');
var cmd            = (process.argv[2] || 'nothing');
var is_reset_user  = cmd === 'reset_with_customer';
var is_reset       = cmd === 'reset' || is_reset_user;
var is_up          = is_reset || cmd === 'up';
var is_down        = is_reset || cmd === 'down';
var is_list        = cmd === 'list';
var Redis = require('okdoki/lib/Redis').Redis;
var pg    = require('okdoki/lib/POSTGRESQL').pg;
var Jobs  = require('okdoki/lib/Jobs').Jobs;

if (!is_up && !is_down && !is_list) {
  console.log('Unknown cmd: ' + process.argv[2]);
  process.exit(1);
}

var tbls = new db.query();
tbls.show_tables(function (meta) {

  var names = _.pluck(meta.rows, 'name');

  if (cmd === 'list') {
    console.log('DBs: ' + names.join(', '));
    return true;
  }

  var ok = new db.query();

  if (is_down) {

    _.each(names, function (n, i) {
      if (n.indexOf('public.') === 0 ) {
        ok.q('DROP TABLE ' + n + '' );
      };
    });

    ok.q('DROP TABLE IF EXISTS bot_chat');
    ok.q('DROP TABLE IF EXISTS consumers');
    ok.q('DROP TABLE IF EXISTS masks');
    ok.q('DROP TABLE IF EXISTS comments');
  }


  if (is_up) {
    ok.q("CREATE EXTENSION IF NOT EXISTS plpython3u");
    ok.q("CREATE EXTENSION IF NOT EXISTS pgcrypto");

    ok.q(" \
         CREATE OR REPLACE FUNCTION public.json_get_varchar_array(j text, k text) \
           RETURNS varchar[] \
         AS $$    \
           import json; \
           d = json.loads(j or '{}'); \
           return d[k] if k in d else []; \
         $$ LANGUAGE plpython3u; \
    ");

    ok.q(" \
         CREATE OR REPLACE FUNCTION public.json_get_text_array(j text, k text) \
           RETURNS text[] \
         AS $$    \
           import json; \
           d = json.loads(j or '{}')[k]; \
           return  d[k] if k in d else []; \
         $$ LANGUAGE plpython3u; \
    ");

    ok.q(" \
         CREATE OR REPLACE FUNCTION public.json_get(j text, k text) \
           RETURNS text \
         AS $$    \
           import json; \
           d = json.loads(j or '{}')[k]; \
           return  d[k] if k in d else \"\"; \
         $$ LANGUAGE plpython3u; \
    ");

    ok.q(" \
         CREATE OR REPLACE FUNCTION public.json_merge(o text, n text) \
           RETURNS text \
         AS $$    \
           import json; \
           oj = json.loads(o or \"{}\");   \
           nj = json.loads(n or \"{}\");   \
           f  = dict(list(oj.items()) + list(nj.items())); \
           return json.dumps(f);         \
         $$ LANGUAGE plpython3u; \
    ");

    ok.q(" \
         CREATE OR REPLACE FUNCTION encode_pass_phrase(varchar) \
           RETURNS varchar \
         AS $$ \
           SELECT encode(digest($1, 'sha512'), 'hex') \
         $$ LANGUAGE SQL STRICT IMMUTABLE; \
    ");

    ok.q(" \
     CREATE TABLE IF NOT EXISTS customers ( \
       id varchar(15) PRIMARY KEY, \
       created_at timestamp default (now() AT TIME ZONE 'UTC'),  \
       trashed_at timestamp default null,   \
       email text,                 \
       pass_phrase_hash varchar(150) NOT NULL \
    )");

    ok.q( " \
     CREATE TABLE IF NOT EXISTS screen_names ( \
       id                  varchar(15) PRIMARY KEY,   \
       owner_id            varchar(15) NOT NULL, \
       created_at          timestamp default (now() AT TIME ZONE 'UTC'),  \
       screen_name         varchar(15) NOT NULL UNIQUE,  \
       display_name        varchar(15) NOT NULL UNIQUE,  \
       nick_name           varchar(30) default NULL,  \
       read_able           varchar(1) default 'W', \
       read_able_list      varchar(100) ARRAY,   \
       about               text default null,    \
       settings            text default null,                 \
       details             text default null     \
       , trashed_at        timestamp default NULL \
    )");

    ok.q( " \
     CREATE TABLE IF NOT EXISTS bots         ( \
       id                  varchar(15) PRIMARY KEY,   \
       owner_id            varchar(15) NOT NULL, \
       name                varchar(15) NOT NULL UNIQUE,  \
       display_name        varchar(15) NOT NULL UNIQUE,  \
       nick_name           varchar(30) default NULL,  \
       read_able           varchar(1) default 'W', \
       read_able_list      varchar(100) ARRAY,   \
       url                 text default null,    \
       pass_phrase_hash     varchar(150) default NULL,\
       about               text default null,    \
       settings            text default null,                 \
       details             text default null     \
       , trashed_at        timestamp default NULL \
    )");


    ok.q("CREATE INDEX ON screen_names (owner_id)");

    ok.q(" \
      CREATE TABLE IF NOT EXISTS comments ( \
        id                varchar(30) NOT NULL UNIQUE, \
        screen_name_id    varchar(15) NULL NULL, \
        conv_id           varchar(30) NOT NULL UNIQUE, \
        ref_id            varchar(30) NOT NULL UNIQUE, \
        settings          text default null,       \
        details           text default null,       \
        body              text NOT NULL,         \
        created_at        timestamp default (now() AT TIME ZONE 'UTC'),  \
        updated_at        timestamp default null, \
        trashed_at        timestamp default null  \
    )");

    ok.q(" \
      CREATE TABLE IF NOT EXISTS follows  ( \
        id                varchar(30) PRIMARY KEY, \
        pub_id            varchar(15) NULL NULL, \
        screen_name_id    varchar(15) NULL NULL, \
        settings          text default null,       \
        details           text default null,       \
        body              text,         \
        created_at        timestamp default (now() AT TIME ZONE 'UTC'),  \
        trashed_at        timestamp default null \
    )");

    ok.q("CREATE INDEX ON follows (screen_name_id)");

    ok.q(" \
      CREATE TABLE IF NOT EXISTS contacts ( \
        id                varchar(30) PRIMARY KEY, \
        owner_id          varchar(15) NULL NULL, \
        contact_id        varchar(15) NULL NULL, \
        settings          text default null,       \
        details           text default null,       \
        body              text,       \
        created_at        timestamp default (now() AT TIME ZONE 'UTC'),  \
        trashed_at        timestamp default null \
        , CONSTRAINT unique_to_owner UNIQUE (owner_id, contact_id) \
    )");

    ok.q(" \
      CREATE TABLE IF NOT EXISTS labels   ( \
        id                varchar(30) NOT NULL UNIQUE, \
        owner_id          varchar(15) NULL NULL, \
        label             varchar(40) NULL NULL, \
        created_at        timestamp default (now() AT TIME ZONE 'UTC'),  \
        trashed_at        timestamp default null \
        , UNIQUE (owner_id, label) \
    )");

    ok.q(" \
      CREATE TABLE IF NOT EXISTS labelings ( \
       id              varchar(30) NOT NULL UNIQUE, \
       pub_id          varchar(15) NOT NULL,        \
       label_id        varchar(30) NOT NULL, \
       created_at      timestamp default (now() AT TIME ZONE 'UTC'),  \
       trashed_at      timestamp default null   \
       , UNIQUE (pub_id, label_id) \
    )");

    ok.q(" \
      CREATE TABLE IF NOT EXISTS posts ( \
       id              varchar(30) PRIMARY KEY, \
       pub_id          varchar(15) NOT NULL,        \
       author_id       varchar(15) NOT NULL,        \
       section_id      smallint NOT NULL,    \
       settings        text default null , \
       details         text default null , \
       body            text,                 \
       read_able       varchar(1) default 'W', \
       read_able_list  varchar(100) ARRAY,   \
       allow           varchar[] default '{}',   \
       disallow        varchar[] default '{}',   \
       created_at      timestamp default (now() AT TIME ZONE 'UTC'),  \
       updated_at      timestamp default null,  \
       trashed_at      timestamp default null   \
    )");

    ok.q(" CREATE INDEX ON posts (created_at DESC); ");
  }

  ok.run_and_then(function (meta) {
    console.log('Finished migrating the main db.');
    if (!is_reset_user) {
      Chat_Bot.redis.quit();
      return;
    }

    var p = "pass phrase";
    var jobs = Jobs.new();
    var customer_created = function (f) {
      return function (err, c) {
        console.log('Finished creating customer: ' + c.data.screen_names[0]);
        f(err, c);
      };
    };

    var bot_created = function (f) {
      return function (err, c) {
        console.log('Finished creating bot: ' + c.screen_name);
        f(err, c);
      };
    };

    _.each(['go99', 'dos'], function (sn) {
      jobs.create('create: ', sn, function (f, g, id) {
        Customer.create({screen_name: sn, pass_phrase: p, confirm_pass_phrase: p, ip: '000.000.00'}, customer_created(f));
      });
    });

    jobs.create('create bot: ', '404@go99', function (f, g, id) {
      var cb = Chat_Bot.new(id);
      cb.create({url: "https://okdoki-bot.herokuapp.com/test/404/404"}, bot_created(f));
    });

    jobs.create('create bot: ', 'ok@go99', function (f, g, id) {
      var cb = Chat_Bot.new(id);
      cb.create({url: "https://okdoki-bot.herokuapp.com/test/ok"}, bot_created(f));
    });

    jobs.create('create bot: ', 'im@dos', function (f, g, id) {
      var cb = Chat_Bot.new(id);
      cb.create({url: "https://okdoki-bot.herokuapp.com/test/im"}, bot_created(f));
    });

    jobs.create('create bot: ', 'not_json@dos', function (f, g, id) {
      var cb = Chat_Bot.new(id);
      cb.create({url: "https://okdoki-bot.herokuapp.com/test/not_json"}, bot_created(f));
    });

    jobs.run_fifo(function () {
      console.log('Closing redis...');
      Chat_Bot.redis.quit();
    });

  });

}); // === show_databases



// ==========================================================================================
// console.log('Process id: ' + process.pid);




