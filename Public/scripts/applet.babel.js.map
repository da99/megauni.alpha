{"version":3,"sources":["applet.js"],"names":[],"mappings":";;AAEA,YAAY,CAAC;;AAEb,IAAI,MAAM,CAAC;;AAEX,MAAM,GAAG,CAAC,YAAY;;AAEpB,MAAI,EAAE,CAAC;;AAEP,IAAE,GAAG;AACH,OAAG,EAAG,eAAY;AAChB,UAAI,MAAM,CAAC,OAAO,EAChB,OAAO,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;AAC/C,aAAO,IAAI,CAAC;KACb;;AAED,WAAO,EAAG,iBAAU,GAAG,EAAE;AACvB,UAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAClB,OAAO,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;;AAE/C,aAAO,GAAG,CACT,KAAK,CAAC,GAAG,CAAC,CACV,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CACX,GAAG,CAAC,UAAU,IAAI,EAAE;AACnB,eAAO;AACL,cAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AACb,cAAI,EAAE,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACnC,CAAC;OACH,CAAC,CAAC;KACJ;;AAED,eAAW,EAAE,qBAAS,GAAG,EAAE;AACzB,aAAO,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;KACnC;;AAED,mBAAe,EAAG,yBAAU,GAAG,EAAE;AAC/B,aAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;KAC3B;;AAED,QAAI,EAAG,cAAU,QAAQ,EAAgB;wCAAX,SAAS;AAAT,iBAAS;;;AACrC,UAAI,KAAK,GAAG,SAAS,CAAC,GAAG,CAAE,UAAA,CAAC;eAAI,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;OAAA,CAAC,CAAC;AAC/C,aAAO,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,GAAG,EAAE;AAC7C,eAAO,QAAQ,IAAI,CAAC,IAAI,GAAG,CAAC;OAC7B,EAAE,EAAE,CAAC,CAAC;KACR;;AAED,eAAW,EAAG,qBAAU,CAAC,EAAE;AACzB,aAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;KACxB;;AAED,SAAK,EAAG,eAAU,GAAG,EAAgB;yCAAX,SAAS;AAAT,iBAAS;;;AACjC,aAAO,CAAC,CAAC,SAAS,CAAC,CAClB,GAAG,CAAC,EAAE,CAAC,WAAW,CAAC,CACnB,WAAW,EAAE,CACb,GAAG,CAAC,EAAE,CAAC,WAAW,CAAC,CACnB,WAAW,EAAE,CACb,MAAM,CAAC,EAAE,CAAC,eAAe,CAAC,CAC1B,GAAG,CAAC,UAAU,IAAI,EAAE;AACnB,YAAI,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EACrD,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC;AACnB,cAAM,IAAI,KAAK,iBAAc,IAAI,CAAC,QAAQ,yBAAmB,GAAG,CAAC,QAAQ,EAAE,CAAG,CAAC;OAChF,CAAC,CACD,KAAK,EAAE,CAAC;KACV;;AAED,UAAM,EAAG;AACP,SAAG,EAAE,gBAAY;AACf,eAAO;AACL,eAAK,EAAE,EAAE;AACT,oBAAU,EAAE,EAAE;SACf,CAAC;OACH;KACF;;AAAA,GAEF;;AAAC,AAEF,SAAO,EAAE,CAAC;CAEX,CAAA,EAAG;AAAC","file":"applet.babel.js","sourcesContent":["/* jshint undef: true, unused: true */\n/* global _ */\n\"use strict\";\n\nvar Applet;\n\nApplet = (function () {\n\n  var _$;\n\n  _$ = {\n    log : function () {\n      if (window.console)\n        return console.log.apply(console, arguments);\n      return this;\n    },\n\n    to_type : function (raw) {\n      if (!_.isString(raw))\n        return new Error(\"Only one String allowed.\");\n\n      return raw\n      .split(':')\n      .map(_.trim)\n      .map(function (pair) {\n        return {\n          name: pair[0],\n          type: _$.standardize_type(pair[1])\n        };\n      });\n    },\n\n    comma_split: function(str) {\n      return str.split(\",\").map(_.trim);\n    },\n\n    is_blank_string : function (str) {\n      return _.trim(str) === '';\n    },\n\n    args : function (raw_args, ...raw_names) {\n      let names = raw_names.map( x => _$.to_type(x));\n      return names.reduce(function (o, curr, i, arr) {\n        return raw_args && o && arr;\n      }, {});\n    },\n\n    space_split : function (s) {\n      return s.split(/\\s+/g);\n    },\n\n    funcs : function (mod, ...raw_names) {\n      return _(raw_names)\n      .map(_$.space_split)\n      .flattenDeep()\n      .map(_$.comma_split)\n      .flattenDeep()\n      .reject(_$.is_blank_string)\n      .map(function (name) {\n        if (mod.hasOwnProperty(name) && _.isFunction(mod[name]))\n          return mod[name];\n        throw new Error(`Function \"${name.toString}\" not found on: ${mod.toString()}`);\n      })\n      .value();\n    },\n\n    applet : {\n      new: function () {\n        return {\n          funcs: [],\n          data_cache: {},\n        };\n      }\n    } // === applet { ... }\n\n  }; // === _$\n\n  return _$;\n\n})(); // === module Applet\n\n"]}