#!/usr/bin/env node

var fs = require('fs');
var _  = require('underscore');

var last_change = 0;
var changes     = {};
var dirs        = [];
var watched     = [];
var wait_msg_shown = false;

var ons = [ ];

function is_running() { return river.ops.length > 0; }

var river = {
  ops: [],
  fin: function () {
    if (!river.ops.length)
      return;
    river.ops.shift()();
  },
  err: function (msg) {
    console.log("Error: " + msg);
    river.ops = [];
  }
};


function watch(str_or_list, func) {
  dirs.push(str_or_list);
  dirs = _.uniq(_.flatten(dirs));
  ons.push([str_or_list, func]);
  _.each(dirs, function (name) {
    if (_.contains(watched, name))
      return false;
    fs.watch(name, function (event, file_name) { files_changed(name, file_name); });
    watched.push(name);
  });
}

function files_changed(dir, file_name) {

  if (is_running()) {
    if (dir || file_name) {
      if (!wait_msg_shown) {
        console.log("Still waiting for other funcs to finish.");
        wait_msg_shown = true;
      }
    }
    return;
  }

  if (dir || file_name) {
    changes[dir] = file_name;
    last_change = (new Date).getTime();
    return files_changed();
  }

  var too_early = ((new Date).getTime() - last_change) < 99;
  if (too_early)
    return setTimeout(files_changed, 100);

  for (var dir in changes) {
    for (var i in ons) {
      var pair    = ons[i];
      var pattern = pair[0];
      var func    = pair[1];
      if (dir === pattern || (_.isArray(pattern) && _.contains(pattern, dir))) {
        river.ops.push((function (file, on_change) {
          return function () { on_change(file, river); };
        })(dir + '/' + changes[dir], func))
      }
    }
    delete changes[dir];
  }

  river.fin();

}



// ****************************************************************
// ****************** Start watching... ***************************
// ****************************************************************


watch( ["lib", "views"], function (filename, river) {
  console.log("changed: " + filename);
  river.fin();
});

watch("test", function (filename) {
  console.log("test: " + filename);
  river.fin();
});

watch("public", function (filename) {
  console.log("public: " + filename);
  river.fin();
});

watch("bin/watch", function (file_name) {
  console.log("File bin/watch has changed. Exiting.");
  process.exit(0);
});

console.log("Watching: ", watched.join(', '), "\n");












