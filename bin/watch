#!/usr/bin/env node

var _     = require('underscore');
var watch = require('ok_dev_watch');
var exec  = require("child_process").exec;
var spawn = require("child_process").spawn;
var shell = watch.shell;

// ****************************************************************
// ****************** Start watching... ***************************
// ****************************************************************


watch.dir( ["lib", "templates", "routes"], function (filename, river) {
  console.log("changed: " + filename);
  shutdown_server(function () {
    console.log("\nRe-starting server...");
    restart_server(river.fin);
  });
});

watch.dir("test", function (filename) {
  console.log("test: " + filename);
  river.fin();
});

watch.dir("bin/watch", function (file_name) {
  console.log("\nFile bin/watch has changed. Exiting.");
  shutdown();
});

var public_css = "public/assets/css";
var private_stylus = "stylus_css"

watch.dir( private_stylus, function (file_name, river, event) {
  var css       = stylus_to_css(file_name);
  var folder    = template_family(file_name);
  var base_name = file_name.split('/').pop();
  var compiled  = [public_css, folder, base_name + '.css'].join('/');
  var public_folder = _.compact([public_css , folder]).join('/');
  if (event === 'change')
    shell("mkdir -p " + public_folder, function () {
      shell("stylus " + file_name + " -o " + public_folder, function () {
        shell("mv " + compiled + " " + css, function () {
          console.log("  moved to:" + css, "\n");
          river.fin();
        });
      });
    });
  else {
    console.log("  deleted:  " + file_name);
    console.log("  deleting: " + css);
    shell("rm -f " + css, river.fin);
  }
});

function template_family(stylus) {
  var pieces = stylus.split('/');
  pieces.shift();
  pieces.pop();
  if (pieces.length)
    return pieces.join('/');
  return null;
}

function stylus_to_css(stylus) {
  return stylus
  .replace(private_stylus, public_css)
  .replace(/\.stylus$/i, ".css")
  .replace(/\.styl$/i, ".css")
  .replace(/.stylus.css$/i, ".css")
  ;
}

console.log("Watching: ", watch.dirs.join(', '), "\n");

function shutdown_server(func) {
  exec('bin/stop', function (err, so, se) {
    watch.print_stdio(so, se);
    if (err && !err.message.indexOf("no process found")) {
      console.log("Exiting because: " + err);
      process.exit(1);
    }
    func();
  });
}

function restart_server(func) {

  var server = spawn("bin/restart");
  server.stdout.on('data', function (data) {
    process.stdout.write("" + data);
  });

  server.stderr.on('data', function (data) {
    process.stdout.write("" + data);
  });

  server.on('close', function (code) {
    console.log('server closed: ' + code);
  });

  if (func)
    func();
}

restart_server();

function shutdown() {
  shutdown_server(function () {
    process.exit(0);
  });
}

process.on('SIGINT',  shutdown);
process.on('SIGTERM', shutdown);







