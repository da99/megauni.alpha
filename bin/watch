#!/usr/bin/env node

var _        = require('underscore');
var chokidar = require('chokidar');
var exec     = require("child_process").exec;
var spawn    = require("child_process").spawn;
var fs       = require("fs");
var throw_err= function (err) {
  throw err;
};
var shell    = function (cmd, func) {
  return exec(cmd, function (err, o, e) {
    if ( o ) process.stdout.write(o);
    if ( e ) process.stdout.write(e);
    if (err) throw err;
    if (func)
      func(o, e);
  });
};

// ****************************************************************
// ****************** Start watching... ***************************
// ****************************************************************

var watchers = [];
var watched_dirs  = [];
var server_started = false

function watch(dirs, func) {
  watched_dirs.push(dirs);
  var w = chokidar.watch(dirs,  {ignored: /^\./, persistent: true, interval: 190});
  watchers.push(w);
  return w;
}

watch("bin/watch")
.on('change', function (f) {
  console.log("\nFile bin/watch has changed. Exiting.");
  shutdown_all();
})
.on('error', throw_err);
;

watch( ["lib", "templates", "routes"] )
.on('add', function (f) {
  if (!server_started)
    return;
  console.log("added: " + f);
  restart_server();
})
.on('changed', function (filename) {
  console.log("changed: " + filename);
  restart_server();
})
.on('unlink', function (filename) {
  console.log("deleted: " + filename);
  restart_server();
})
.on('error', throw_err);
;

var public_css = "public/assets/css";
var private_stylus = "stylus_css"

watch( private_stylus )
.on('add', function (f) {
  if (!server_started)
    return;
  stylus_changed(f, 'change');
})
.on('change', function (f) { stylus_changed(f, 'change'); })
.on('unlink', function (f) { stylus_changed(f, 'unlink'); })
;

console.log("Watching: ", _.flatten(watched_dirs).join(', '), "\n");

function stylus_changed(file_name, event) {
  var css       = stylus_to_css(file_name);
  var folder    = template_family(file_name);
  var base_name = file_name.split('/').pop();
  var compiled  = [public_css, folder, base_name + '.css'].join('/');
  var public_folder = _.compact([public_css , folder]).join('/');

  console.log("");

  if (event === 'unlink') {
    console.log("  deleted:  " + file_name);
    console.log("  deleting: " + css);

    // For some reason the file is sometimes deleted,
    // after the folder. Using a conditional
    // prevents an warning from being printed.
    shell(' if [ -e ' + css + ' ] ; then trash-put ' + css + ' ; fi ');
  } else {
    shell("mkdir -p " + public_folder, function () {
      shell("stylus " + file_name + " -o " + public_folder, function () {
        shell("mv " + compiled + " " + css, function () {
          console.log("  moved to:" + css);
        });
      });
    });
  }

} // function

function template_family(stylus) {
  var pieces = stylus.split('/');
  pieces.shift();
  pieces.pop();
  if (pieces.length)
    return pieces.join('/');
  return null;
}

function stylus_to_css(stylus) {
  return stylus
  .replace(private_stylus, public_css)
  .replace(/\.stylus$/i, ".css")
  .replace(/\.styl$/i, ".css")
  .replace(/.stylus.css$/i, ".css")
  ;
}

function shutdown_server(func) {
  exec('bin/stop', function (err, so, se) {
    if (so) console.log(so);
    if (se) console.log(se);
    if (err && !err.message.indexOf("no process found")) {
      console.log("Exiting because: " + err);
      process.exit(1);
    }
    func();
  });
}

function restart_server(func) {

  var server = spawn("bin/restart");
  server.stdout.on('data', function (data) {
    server_started = true;
    process.stdout.write("" + data);
  });

  server.stderr.on('data', function (data) {
    process.stdout.write("" + data);
  });

  server.on('close', function (code) {
    console.log('server closed: ' + code);
  });

  if (func)
    func();
}

function shutdown_all() {
  shutdown_server(function () {
    close();
  });
}

function close() {
  var w = watchers.pop();
  if (w) {
    w.close();
    close();
  } else {
    process.exit(0);
  }
}

restart_server();
process.on('SIGINT',  shutdown_all);
process.on('SIGTERM', shutdown_all);







